import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "net.devwiki.multibuild"
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            buildConfigField 'String', 'url', "\"" + getUrl() + "\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            buildConfigField 'String', 'url', "\"" + getUrl() + "\""
        }
    }

    productFlavors{
        normal {}
        alpha {}
        beta {}
        dev {}
    }
}

def getUrl() {
    String flavorName = getCurrentFlavor();
    String url = "normal";

    switch (flavorName){
        case "nomral":
            url = "normal";
            break;
        case "alpha":
            url = "alpha";
            break;
        case "beta":
            url = "beta";
            break
        case "dev":
            url = "dev";
            break
    }
    return url;
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    println("tskReqStr:" + tskReqStr);

    Pattern pattern;

    if (tskReqStr.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    } else {
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    }
    Matcher matcher = pattern.matcher( tskReqStr )

    if(matcher.find()) {
        return matcher.group(1).toLowerCase()
    } else {
        println "NO MATCH FOUND"
        return "";
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.2.1'
}
